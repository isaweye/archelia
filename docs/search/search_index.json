{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p> GET .JAR FILE</p> <ol> <li>Install to local repo <pre><code>   $ mvn install\n</code></pre></li> <li>Add as dependency <pre><code>    &lt;dependency&gt;\n&lt;groupId&gt;uk.mqchinee&lt;/groupId&gt;\n&lt;artifactId&gt;Archelia&lt;/artifactId&gt;\n&lt;version&gt;{version-here}&lt;/version&gt;\n&lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre></li> </ol> <p>OR (not recommended)</p> <ol> <li>Add as dependency <pre><code>    &lt;dependency&gt;\n&lt;groupId&gt;uk.mqchinee&lt;/groupId&gt;\n&lt;artifactId&gt;Archelia&lt;/artifactId&gt;\n&lt;version&gt;{version-here}&lt;/version&gt;\n&lt;scope&gt;system&lt;/scope&gt;\n&lt;systemPath&gt;{path-to-jar}&lt;/systemPath&gt;\n&lt;/dependency&gt;\n</code></pre></li> </ol>"},{"location":"commands/","title":"Commands","text":"<pre><code>@CommandInfo()\npublic class MySimpleCommand extends AbstractCommand {\npublic MySimpleCommand() {\nsuper(\"command\", MyPlugin.getInstance());\n}\n@Override\npublic List&lt;String&gt; complete(CommandSender commandSender, String[] strings) {\nreturn null;\n}\n@Override\npublic void sub(CommandSender commandSender, String[] strings) {}\n@Override\npublic void execute(CommandSender commandSender, String s, String[] strings) {\ncommandSender.sendMessage(\"Hello, world!\");\n}\n}\n</code></pre> <pre><code>@Override\npublic void onEnable() {\nnew MySimpleCommand();\n}\n</code></pre> <pre><code>@CommandInfo(\npermission = \"myplugin.worldcommand\",\npermission_message = \"&amp;cYou don't have permission to do that.\",\nfilter = SenderFilter.PLAYER,\nfilter_message = \"&amp;cThis command can only be used by players.\"\n)\npublic class WorldCommand extends AbstractCommand {\npublic WorldCommand() {\nsuper(\"world\", MyPlugin.getInstance());\n}\n@Override\npublic List&lt;String&gt; complete(CommandSender commandSender, String[] strings) {\nreturn Arrays.asList(\"hello\", \"goodbye\", \"echo\");\n}\n@Override\npublic void sub(CommandSender commandSender, String[] strings) {\nsubCommand(new Hello(this, commandSender, strings));\nsubCommand(new Goodbye(this, commandSender, strings));\nsubCommand(new Echo(this, commandSender, strings));\n}\n@Override\npublic void execute(CommandSender commandSender, String s, String[] strings) {\ncommandSender.sendMessage(\":)\");\n}\n}\n</code></pre> <pre><code>@SubCommandInfo()\npublic class Hello extends SubCommand {\npublic Hello(AbstractCommand parent, CommandSender sender, String[] args) {\nsuper(parent, sender, args, false); // hasArgs: false\n}\n@Override\npublic String getName() {\nreturn \"hello\";\n}\n@Override\npublic void execute() {\ngetSender().sendMessage(\"Hello, World!\");\n}\n}\n</code></pre> <pre><code>@SubCommandInfo()\npublic class Goodbye extends SubCommand {\npublic Goodbye(AbstractCommand parent, CommandSender sender, String[] args) {\nsuper(parent, sender, args, false);\n}\n@Override\npublic String getName() {\nreturn \"goodbye\";\n}\n@Override\npublic void execute() {\ngetSender().sendMessage(\"Goodbye, World!\");\n}\n}\n</code></pre> <pre><code>  @SubCommandInfo(\npermission = \"myplugin.echo\",\npermission_message = \"&amp;cYou don't have permission to do that.\",\nfilter = SenderFilter.PLAYER, // SenderFilter.CONSOLE, SendFilter.BOTH\nfilter_message = \"&amp;cThis command can only be used by players.\",\nno_args_message = \"&amp;cUsage: /world echo &amp;oINTEGER\",\nregex = \"[0-9]+\",\nregex_message = \"&amp;cUsage: /world echo &amp;oINTEGER\"\n)\npublic class Echo extends SubCommand {\npublic Echo(AbstractCommand parent, CommandSender sender, String[] args) {\nsuper(parent, sender, args, true); // hasArgs: true\n}\n@Override\npublic String getName() {\nreturn \"echo\";\n}\n@Override\npublic void execute() {\ngetSender().sendMessage(getArgs()[1]);\n}\n}\n</code></pre> <pre><code>@Override\npublic void onEnable() {\nnew WorldCommand();\n}\n</code></pre>"},{"location":"inventory/","title":"Inventory-Based GUI","text":"<p>extended version of @focamacho's SealMenus</p> <pre><code>public class MyGUI {\nprivate final ChestMenu menu;\npublic MyGUI() {\n// title, rows, plugin, is concurrent\n// (Allows you to choose between HashMap (recommended) and ConcurrentHashMap.\n//    If you want to get rid of ConcurrentModificationException\n// (occurs when using MovableItem), use ConcurrentHashMap)\nthis.menu = MenuManager.createChestMenu(\"Buttons\", 5, MyPlugin.getInstance(), true);\n}\npublic void prepare() {\n// ItemStack, update\nClickableItem S = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;emovable\").build(), false);\nClickableItem I = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;eloopable\").build(), false);\nClickableItem G = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;eclickable\").build(), false);\nClickableItem N = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;edynamic\").build(), false);\nClickableItem K = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;etoggleable\").build(), false);\n// item, speed, menu, reverse, structure\nMovableItem M = MovableItem.create(\nnew ItemBuilder(Material.QUARTZ).name(\"&amp;fitem\")).build(), 4, menu, true,\n\"# % % % % % % % %\",\n\"# # # # # # # # #\",\n\"# # # # # # # # #\",\n\"# # # # # # # # #\",\n\"# # # # # # # # #\"\n);\nM.setOnClick(e -&gt; e.getWhoClicked().sendMessage(\"test\"));\nLoopableItem L = LoopableItem.create(Arrays.asList(\nnew ItemStack(Material.DIAMOND),\nnew ItemStack(Material.GOLD_INGOT),\nnew ItemStack(Material.IRON_INGOT)),\n20);\nClickableItem C = ClickableItem.create(new ItemStack(Material.OAK_BUTTON), false);\nC.setOnPrimary(e -&gt; e.getWhoClicked().sendMessage(\"hi, \"+e.getWhoClicked().getName()));\nDynamicItem D = DynamicItem.create(new ItemStack(Material.OAK_LEAVES), menu);\nD.setOnClick(e -&gt; D.replace(new ItemStack(Material.BARRIER), 20));\nItemStack on = new ItemBuilder(Material.GREEN_STAINED_GLASS)\n.name(\"&amp;fSomething &amp;aENABLED\").build();\nItemStack off = new ItemBuilder(Material.RED_STAINED_GLASS)\n.name(\"&amp;fSomething &amp;cDISABLED\").build();\n// enabled, disabled, toggle on click\nToggleableItem T = ToggleableItem.create(on, off, true);\nStructure structure = new Structure(\n\"S M # # # # # # #\",\n\"I # # # L # # # #\",\n\"G # # # C # # # #\",\n\"N # # # D # # # #\",\n\"K # # # T # # # #\"\n)\n.set('S', S)\n.set('I', I)\n.set('G', G)\n.set('N', N)\n.set('K', K)\n.set('M', M)\n.set('L', L)\n.set('C', C)\n.set('D', D)\n.set('T', T);\nstructure.process(menu);\n}\npublic void open(Player player) {\nprepare();\nmenu.open(player);\n}\n}\n</code></pre> <p> </p> <pre><code>@InventoryStructure({\n\"C A C C B C C A C\",\n\"C % % % % % % % C\",\n\"C % % % % % % % C\",\n\"C % % % % % % % C\",\n\"C % % % % % % % C\",\n\"C &lt; C C C C C &gt; C\"\n})\npublic class MyGUI {\nprivate final PageableChestMenu menu;\npublic MyGUI() {\nthis.menu = MenuManager.createPageableChestMenu(\"Dirt\", 6, MyPlugin.getInstance(), false);\n}\npublic void prepare() {\nClickableItem C = ClickableItem.create(new ItemStack(Material.GRAY_STAINED_GLASS_PANE), false);\nClickableItem A = ClickableItem.create(new ItemStack(Material.EMERALD), false);\nClickableItem B = ClickableItem.create(new ItemStack(Material.BOOK), false);\nStructure s = Structure.getFromAnnotation(this.getClass())\n.set('C', C)\n.set('A', A)\n.set('B', B)\n.set('&lt;', ClickableItem.create(new ItemStack(Material.SPECTRAL_ARROW), false))\n.set('&gt;', ClickableItem.create(new ItemStack(Material.SPECTRAL_ARROW), false));\ns.process(menu);\nfor(int i = 1; i &lt; 64; i++) {\nmenu.addPageableItem(ClickableItem.create(new ItemStack(Material.DIRT, i), false));\n}\n}\npublic void open(Player player) {\nprepare();\nmenu.open(player);\n}\n}\n</code></pre> <p> </p>"}]}