{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p> GET .JAR FILE</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#local","title":"Local","text":"recommendednot recommended <p>Step 1. Install to local repo</p> <pre><code>   $ mvn install\n</code></pre> <p>Step 2. Add as dependency</p> <pre><code>    &lt;dependency&gt;\n&lt;groupId&gt;uk.mqchinee&lt;/groupId&gt;\n&lt;artifactId&gt;Archelia&lt;/artifactId&gt;\n&lt;version&gt;{version-here}&lt;/version&gt;\n&lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Step 1. Add as dependency</p> <pre><code>    &lt;dependency&gt;\n&lt;groupId&gt;uk.mqchinee&lt;/groupId&gt;\n&lt;artifactId&gt;Archelia&lt;/artifactId&gt;\n&lt;version&gt;{version-here}&lt;/version&gt;\n&lt;scope&gt;system&lt;/scope&gt;\n&lt;systemPath&gt;{path-to-jar}&lt;/systemPath&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"#jitpack","title":"JitPack","text":"mavengradlesbtleiningen <p>Step 1. Add the JitPack repository to your build file</p> <pre><code>    &lt;repositories&gt;\n&lt;repository&gt;\n&lt;id&gt;jitpack.io&lt;/id&gt;\n&lt;url&gt;https://jitpack.io&lt;/url&gt;\n&lt;/repository&gt;\n&lt;/repositories&gt;\n</code></pre> <p>Step 2. Add the dependency</p> <pre><code>    &lt;dependency&gt;\n&lt;groupId&gt;com.github.isaweye&lt;/groupId&gt;\n&lt;artifactId&gt;archelia&lt;/artifactId&gt;\n&lt;version&gt;Tag&lt;/version&gt;\n&lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Step 1. Add the JitPack repository to your build file</p> <pre><code>    allprojects {\nrepositories {\n...\nmaven { url 'https://jitpack.io' }\n}\n}\n</code></pre> <p>Step 2. Add the dependency</p> <pre><code>    dependencies {\nimplementation 'com.github.isaweye:archelia:Tag'\n}\n</code></pre> <p>Step 1. Add the JitPack repository to your build file</p> <pre><code>    resolvers += \"jitpack\" at \"https://jitpack.io\"\n</code></pre> <p>Step 2. Add the dependency</p> <pre><code>    libraryDependencies += \"com.github.User\" % \"Repo\" % \"Tag\"\n</code></pre> <p>Step 1. Add the JitPack repository to your build file</p> <pre><code>    :repositories [[\"jitpack\" \"https://jitpack.io\"]]\n</code></pre> <p>Step 2. Add the dependency</p> <pre><code>    :dependencies [[com.github.User/Repo \"Tag\"]]\n</code></pre>"},{"location":"built-in/","title":"Built-in","text":""},{"location":"built-in/#important","title":"Important","text":"<p>The libraries below are already built into Archelia. You do not need to plug them in as additional dependencies!</p> Block-SQLiteIridiumColorAPI <p>Source</p> <p>Source</p>"},{"location":"built-in/#block-sqlite","title":"block-sqlite","text":"<p>Allows you to manage your SQLite databases without hard coding.</p> <p>This library is indepent from any Bukkit/Spigot library.</p>"},{"location":"built-in/#why-should-you-use-an-api","title":"Why should you use an API?","text":"<p>Hard code means undevelopable code. Using APIs saves your code from being hard code (most of the time). The purpose of this API is, completely save your code from hard-coded database classes. The hard code problem is one of the most dangerous things in software engineering.</p>"},{"location":"built-in/#how-to-connect-database","title":"How to connect database","text":"<ol> <li>Create SQLHandler class of your plugin.</li> <li>Extend SQLHandler</li> <li>Call super connect method to connect database. The paramater of this method is name of the database.    4Create a createTable() method and create your table. (I explained below)</li> </ol> <pre><code>public class MySQLManagerClass extends SQLHandler {\npublic MySQLManagerClass(JavaPlugin plugin) {\nsuper(plugin.getDataFolder().getAbsolutePath());\nconnect();\n}\npublic void connect() {\nsuper.connect(\"database\");\nBukkit.getLogger().info(\"SQLite DB Connected successfully\");\ncreateTable();\n}\npublic SQLTable createTable() {\n//table stuff\n}\n}\n</code></pre>"},{"location":"built-in/#how-to-use","title":"How to use","text":""},{"location":"built-in/#create-a-table-object","title":"Create a table object","text":"<ul> <li>First param, specify your table name</li> <li>Second param, specify name of field that you'll use instead of ID</li> <li>Third param, add a field to your table.     You know. Fields has some properties, data type, not null, unique, primary key...     You can specify this properties too.</li> <li>No no no! You don't need (goddamn) the long 'create table...' text. You given us what we need. Just call create() method. I coded that API to do not write that text. I hate it i hate.</li> </ul> <pre><code>public SQLTable createTable() {\nfinal SQLTable sqlTable = new SQLTable(\"school3\", \"no\")\n//                       isNotNull, isUnique, isPrimaryKey\n.addField(\"no\", DataType.INTEGER, true, true, true)\n//Other params is false as default\n.addField(\"name\", DataType.TEXT)\n.addField(\"class\", DataType.TEXT);\nreturn sqlTable.create();\n}\n</code></pre>"},{"location":"built-in/#data-usage","title":"Data Usage","text":"<p>Let's test our database. The mission is \"Put a student named 'Hamza', if the student already exist then change name of student with 'Adnan'.\" - Specify an id to make an example. i choose 306. (because that is my school number xd) - Check your table and ask 'is this id inserted before?'</p> <pre><code>public void test(SQLTable sqltable) {\nint id = 306;\nif (sqltable.exist(id)) {\n}\n}\n</code></pre> <p>If the answer is yes, you must update. Your table already has another fields you need. So, you can specify fields only that you want to change.</p> <pre><code>public void test(SQLTable sqltable) {\nint id = 306;\nif (sqltable.exist(id)) {\nsqltable.update(sqltable.createUpdate(id).putData(\"name\", \"ali\"));\n}\n}\n</code></pre> <p>If the answer is no, you must insert. Your table does not have another fields you need. So you must specify all fields.</p> <pre><code>public void test(SQLTable sqltable) {\nint id = 306;\nif (sqltable.exist(id)) {\nsqltable.update(sqltable.createUpdate(id).putData(\"name\", \"Adnan\"));\n} else {\nsqltable.insert(sqltable.createUpdate(id).putData(\"name\", \"Hamza\").putData(\"class\", \"12E\").putData(\"no\", id));\n}\n}\n</code></pre> <p>That is test so i must show you all things. Next mission is: Delete data you putted.</p> <pre><code>public void test(SQLTable sqltable) {\nint id = 306;\nif (sqltable.exist(id)) {\nsqltable.update(sqltable.createUpdate(id).putData(\"name\", \"Adnan\"));\n} else {\nsqltable.insert(sqltable.createUpdate(id).putData(\"name\", \"Hamza\").putData(\"class\", \"12E\").putData(\"no\", id));\n}\nsqltable.delete(306);\n}\n</code></pre> <p>Perfect. Also there is shorter a way too. But that way only puts student named 'Hamza'. Does not changes names. But if you want to know is updated or inserted, the insertOrUpdate() method returns true if updated.</p> <pre><code>public void test(SQLTable sqltable) {\nint id = 306;\nsqltable.insertOrUpdate(sqltable.createUpdate(id).putData(\"name\",\"Hamza\").putData(\"class\",\"12E\").putData(\"no\",id));\nsqltable.delete(306);\n}\n</code></pre> <p>If you want to get result set</p> <pre><code>public void test(SQLTable sqltable) {\nint id = 306;\nResultSet rs = sqltable.select(id);\n}\n</code></pre> <p>Fast getter methods. <pre><code>playerDataTable.getBoolean(uuid.toString(),\"isEnabled\");\nplayerDataTable.getInteger(uuid.toString(),\"skywarsKills\");\nplayerDataTable.getString(uuid.toString(),\"displayName\");\n</code></pre></p> <p>Gets boolean value of \"isEnabled\" column of row that has \"uuid.toString()\" value (in the id column).</p> <p>Increase or decrease value. <pre><code>playerDataTable.increaseValue(uuid.toString(), \"points\", 10)\nplayerDataTable.increaseValue(uuid.toString(), \"kills\", 1)\nplayerDataTable.decreaseValue(uuid.toString(), \"money\", 300)\n</code></pre></p>"},{"location":"built-in/#iridium-color-api","title":"iridium-color-api","text":""},{"location":"built-in/#usage","title":"Usage","text":"<p>To add a gradient simply use the  tags <pre><code>Iridium.process(\"&lt;gradient:#2C08BA&gt;Cool string with a gradient&lt;/gradient:#028A97&gt;\");\n</code></pre> <p><p> </p></p> <p>The number after the rainbow represents the saturation <pre><code>Iridium.process(\"&lt;rainbow1&gt;THIS IS A REALLY COOL Rainbow&lt;/rainbow&gt;\");\n</code></pre></p> <p><p> </p></p> <pre><code>Iridium.process(\"&lt;rainbow100&gt;THIS IS A REALLY COOL Rainbow&lt;/rainbow&gt;\");\n</code></pre> <p><p> </p></p> <pre><code>Iridium.process(\"&lt;hex:#FF0080&gt;Cool RGB SUPPORT\");\n</code></pre> <p><p> </p></p> <p>If your server version is pre 1.16 it will map the color to the nearest supported value(This also works with gradient) In the example above, it will map to &amp;5 as this is the closest</p> <p><p> </p></p>"},{"location":"commands/","title":"Commands","text":"<pre><code>@CommandInfo()\npublic class MySimpleCommand extends AbstractCommand {\npublic MySimpleCommand() {\nsuper(\"command\", MyPlugin.getInstance());\n}\n@Override\npublic List&lt;String&gt; complete(CommandSender commandSender, String[] strings) {\nreturn null;\n}\n@Override\npublic void sub(CommandSender commandSender, String[] strings) {}\n@Override\npublic void execute(CommandSender commandSender, String s, String[] strings) {\ncommandSender.sendMessage(\"Hello, world!\");\n}\n}\n</code></pre> <pre><code>@Override\npublic void onEnable() {\nnew MySimpleCommand();\n}\n</code></pre> <pre><code>@CommandInfo(\npermission = \"myplugin.worldcommand\",\npermission_message = \"&amp;cYou don't have permission to do that.\",\nfilter = SenderFilter.PLAYER,\nfilter_message = \"&amp;cThis command can only be used by players.\"\n)\npublic class WorldCommand extends AbstractCommand {\npublic WorldCommand() {\nsuper(\"world\", MyPlugin.getInstance());\n}\n@Override\npublic List&lt;String&gt; complete(CommandSender commandSender, String[] strings) {\nreturn Arrays.asList(\"hello\", \"goodbye\", \"echo\");\n}\n@Override\npublic void sub(CommandSender commandSender, String[] strings) {\nsubCommand(new Hello(this, commandSender, strings));\nsubCommand(new Goodbye(this, commandSender, strings));\nsubCommand(new Echo(this, commandSender, strings));\n}\n@Override\npublic void execute(CommandSender commandSender, String s, String[] strings) {\ncommandSender.sendMessage(\":)\");\n}\n}\n</code></pre> <pre><code>@SubCommandInfo()\npublic class Hello extends SubCommand {\npublic Hello(AbstractCommand parent, CommandSender sender, String[] args) {\nsuper(parent, sender, args, false); // hasArgs: false\n}\n@Override\npublic String getName() {\nreturn \"hello\";\n}\n@Override\npublic void execute() {\ngetSender().sendMessage(\"Hello, World!\");\n}\n}\n</code></pre> <pre><code>@SubCommandInfo()\npublic class Goodbye extends SubCommand {\npublic Goodbye(AbstractCommand parent, CommandSender sender, String[] args) {\nsuper(parent, sender, args, false);\n}\n@Override\npublic String getName() {\nreturn \"goodbye\";\n}\n@Override\npublic void execute() {\ngetSender().sendMessage(\"Goodbye, World!\");\n}\n}\n</code></pre> <pre><code>  @SubCommandInfo(\npermission = \"myplugin.echo\",\npermission_message = \"&amp;cYou don't have permission to do that.\",\nfilter = SenderFilter.PLAYER, // SenderFilter.CONSOLE, SendFilter.BOTH\nfilter_message = \"&amp;cThis command can only be used by players.\",\nno_args_message = \"&amp;cUsage: /world echo &amp;oINTEGER\",\nregex = \"[0-9]+\",\nregex_message = \"&amp;cUsage: /world echo &amp;oINTEGER\"\n)\npublic class Echo extends SubCommand {\npublic Echo(AbstractCommand parent, CommandSender sender, String[] args) {\nsuper(parent, sender, args, true); // hasArgs: true\n}\n@Override\npublic String getName() {\nreturn \"echo\";\n}\n@Override\npublic void execute() {\ngetSender().sendMessage(getArgs()[1]);\n}\n}\n</code></pre> <pre><code>@Override\npublic void onEnable() {\nnew WorldCommand();\n}\n</code></pre>"},{"location":"inventory/","title":"Inventory-Based GUI","text":"<p>extended version of @focamacho's SealMenus</p> <pre><code>public class MyGUI {\nprivate final ChestMenu menu;\npublic MyGUI() {\n// title, rows, plugin, is concurrent\n// (Allows you to choose between HashMap (recommended) and ConcurrentHashMap.\n//    If you want to get rid of ConcurrentModificationException\n// (occurs when using MovableItem), use ConcurrentHashMap)\nthis.menu = MenuManager.createChestMenu(\"Buttons\", 5, MyPlugin.getInstance(), true);\n}\npublic void prepare() {\n// ItemStack, update\nClickableItem S = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;emovable\").build(), false);\nClickableItem I = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;eloopable\").build(), false);\nClickableItem G = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;eclickable\").build(), false);\nClickableItem N = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;edynamic\").build(), false);\nClickableItem K = ClickableItem.create(new ItemBuilder(Material.OAK_SIGN)\n.name(\"&amp;etoggleable\").build(), false);\n// item, speed, menu, reverse, structure\nMovableItem M = MovableItem.create(\nnew ItemBuilder(Material.QUARTZ).name(\"&amp;fitem\")).build(), 4, menu, true,\n\"# % % % % % % % %\",\n\"# # # # # # # # #\",\n\"# # # # # # # # #\",\n\"# # # # # # # # #\",\n\"# # # # # # # # #\"\n);\nM.setOnClick(e -&gt; e.getWhoClicked().sendMessage(\"test\"));\nLoopableItem L = LoopableItem.create(Arrays.asList(\nnew ItemStack(Material.DIAMOND),\nnew ItemStack(Material.GOLD_INGOT),\nnew ItemStack(Material.IRON_INGOT)),\n20);\nClickableItem C = ClickableItem.create(new ItemStack(Material.OAK_BUTTON), false);\nC.setOnPrimary(e -&gt; e.getWhoClicked().sendMessage(\"hi, \"+e.getWhoClicked().getName()));\nDynamicItem D = DynamicItem.create(new ItemStack(Material.OAK_LEAVES), menu);\nD.setOnClick(e -&gt; D.replace(new ItemStack(Material.BARRIER), 20));\nItemStack on = new ItemBuilder(Material.GREEN_STAINED_GLASS)\n.name(\"&amp;fSomething &amp;aENABLED\").build();\nItemStack off = new ItemBuilder(Material.RED_STAINED_GLASS)\n.name(\"&amp;fSomething &amp;cDISABLED\").build();\n// enabled, disabled, toggle on click\nToggleableItem T = ToggleableItem.create(on, off, true);\nStructure structure = new Structure(\n\"S M # # # # # # #\",\n\"I # # # L # # # #\",\n\"G # # # C # # # #\",\n\"N # # # D # # # #\",\n\"K # # # T # # # #\"\n)\n.set('S', S)\n.set('I', I)\n.set('G', G)\n.set('N', N)\n.set('K', K)\n.set('M', M)\n.set('L', L)\n.set('C', C)\n.set('D', D)\n.set('T', T);\nstructure.process(menu);\n}\npublic void open(Player player) {\nprepare();\nmenu.open(player);\n}\n}\n</code></pre> <p> </p> <pre><code>@InventoryStructure({\n\"C A C C B C C A C\",\n\"C % % % % % % % C\",\n\"C % % % % % % % C\",\n\"C % % % % % % % C\",\n\"C % % % % % % % C\",\n\"C &lt; C C C C C &gt; C\"\n})\npublic class MyGUI {\nprivate final PageableChestMenu menu;\npublic MyGUI() {\nthis.menu = MenuManager.createPageableChestMenu(\"Dirt\", 6, MyPlugin.getInstance(), false);\n}\npublic void prepare() {\nClickableItem C = ClickableItem.create(new ItemStack(Material.GRAY_STAINED_GLASS_PANE), false);\nClickableItem A = ClickableItem.create(new ItemStack(Material.EMERALD), false);\nClickableItem B = ClickableItem.create(new ItemStack(Material.BOOK), false);\nStructure s = Structure.getFromAnnotation(this.getClass())\n.set('C', C)\n.set('A', A)\n.set('B', B)\n.set('&lt;', ClickableItem.create(new ItemStack(Material.SPECTRAL_ARROW), false))\n.set('&gt;', ClickableItem.create(new ItemStack(Material.SPECTRAL_ARROW), false));\ns.process(menu);\nfor(int i = 1; i &lt; 64; i++) {\nmenu.addPageableItem(ClickableItem.create(new ItemStack(Material.DIRT, i), false));\n}\n}\npublic void open(Player player) {\nprepare();\nmenu.open(player);\n}\n}\n</code></pre> <p> </p>"},{"location":"utils/","title":"Utils","text":"TextUtilsRunUtilsMapSorterDateUtilsExperiments <pre><code>    // colorize\nString console_message = TextUtils.colorize(\"&amp;aHello, &amp;lBukkit!\");\n// console\nTextUtils.console(console_message);\n// ops\nTextUtils.sendToOps(console_message);\n// from list\nList&lt;String&gt; msg = Arrays.asList(\"1\", \"2\", \"3\");\nString from_list = TextUtils.fromList(msg);\n// from string\nList&lt;String&gt; from_string = TextUtils.fromString(from_list);\n</code></pre> <pre><code>    RunUtils.async(() -&gt; {\n// something\n});\nRunUtils.run(() -&gt; {\n// something\n});\nRunUtils.runLater(() -&gt; {\n// something\n}, 1, Time.IN_SECONDS);\nRunUtils.runLaterAsync(() -&gt; {\n// something\n}, 1, Time.IN_SECONDS);\nint ticks_to_seconds = RunUtils.toSeconds(20);\nRunUtils.repeating(() -&gt; {\n// something\n}, 5, 5, Time.IN_TICKS);\nRunUtils.runTimer(() -&gt; {\n// something\n}, 1, Time.IN_SECONDS);\nRunUtils.runTimerAsync(() -&gt; {\n// something\n}, 1, Time.IN_SECONDS);\n</code></pre> <pre><code>    /*\n      public void sort(\n          Map map,\n          int skip,\n          int limit,\n          ComparingBy comparingBy,\n          Comparator comparator,\n          Consumer&lt;Map.Entry&gt; entry\n         )\n     */\n/*\n      public void sort(\n        Map map,\n        int skip,\n        int limit,\n        ComparingBy comparingBy,\n        Consumer&lt;Map.Entry&gt; entry\n       )\n     */\nMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\nmap.put(\"money\", 1000);\nMapSorter sorter = new MapSorter();\nsorter.sort(map, 5, 10, ComparingBy.KEY, Comparator.reverseOrder(), (entry) -&gt; {\nString key = (String) entry.getKey();\nInteger value = (Integer) entry.getValue();\n});\n</code></pre> <pre><code>    DateUtils dateUtils = new DateUtils();\nlong now = dateUtils.now(1); // offset\nString time = dateUtils.fromEpoch(now, \"yyyy-MM-dd-HH-mm-ss-ns\", \"en\"); // epoch, format, locale\n</code></pre> <pre><code>    Experiments.ignore(() -&gt; { // try, catch (ignored)\nExperiments.chance(50, () -&gt; System.out.println(\"50%\"));\n});\n</code></pre>"}]}